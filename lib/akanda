# -*- mode: shell-script -*-
# lib/akanda
# functions specific to akanda

# Set up default directories
AKANDA_NOVA_DIR=$DEST/akanda-nova
AKANDA_NOVA_REPO=git@github.com:dreamhost/akanda-nova.git

AKANDA_QUANTUM_DIR=$DEST/akanda-quantum
AKANDA_QUANTUM_REPO=git@github.com:dreamhost/akanda-quantum.git

AKANDA_RUG_DIR=$DEST/akanda-rug
AKANDA_RUG_REPO=git@github.com:dreamhost/akanda-rug.git

AKANDA_CONF_DIR=/etc/akanda
AKANDA_RUG_CONF=$AKANDA_CONF_DIR/rug.ini

AKANDA_ISO_FILE=${AKANDA_ISO_FILE:-/vagrant/data/akanda.iso}
AKANDA_ISO_DEFAULT=https://objects.dreamhost.com/dhc/akanda.iso

function configure_akanda() {
    if [[ ! -d $AKANDA_CONF_DIR ]]; then
        sudo mkdir -p $AKANDA_CONF_DIR
    fi
    sudo chown $STACK_USER $AKANDA_CONF_DIR

    cp $AKANDA_RUG_DIR/etc/rug.ini $AKANDA_RUG_CONF
    iniset $AKANDA_RUG_CONF DEFAULT verbose True
    iniset $AKANDA_RUG_CONF DEFAULT admin_user $Q_ADMIN_USERNAME
    iniset $AKANDA_RUG_CONF DEFAULT admin_password $SERVICE_PASSWORD
    iniset $AKANDA_RUG_CONF DEFAULT rabbit_host $RABBIT_HOST
    iniset $AKANDA_RUG_CONF DEFAULT rabbit_password $RABBIT_PASSWORD
}

function configure_akanda_nova() {
    iniset $NOVA_CONF DEFAULT network_api_class akanda.nova.quantumv2.api.API
    iniset $NOVA_CONF DEFAULT service_quantum_metadata_proxy True
}

function configure_akanda_quantum() {
    iniset $QUANTUM_CONF DEFAULT core_plugin akanda.quantum.plugins.ovs_quantum_plugin.OVSQuantumPluginV2
    iniset $QUANTUM_CONF DEFAULT api_extensions_path $AKANDA_QUANTUM_DIR/akanda/quantum/extensions
}

function install_akanda() {
    git_clone $AKANDA_QUANTUM_REPO $AKANDA_QUANTUM_DIR master
    setup_develop $AKANDA_QUANTUM_DIR

    git_clone $AKANDA_NOVA_REPO $AKANDA_NOVA_DIR master
    setup_develop $AKANDA_NOVA_DIR

    git_clone $AKANDA_RUG_REPO $AKANDA_RUG_DIR master
    setup_develop $AKANDA_RUG_DIR
}

function pre_start_akanda() {
    typeset auth_args="--os-username $Q_ADMIN_USERNAME --os-password $SERVICE_PASSWORD --os-tenant-name $SERVICE_TENANT_NAME --os-auth-url $OS_AUTH_URL"
    quantum $auth_args net-show public | grep ' id '
    typeset exists=$?
    if [ $exists -ne 0 ]
    then
        quantum $auth_args net-create public --router:external=True
        quantum $auth_args subnet-create --ip-version 4 public 172.16.77.0/24
        # v6 networks are created by default now?
        #quantum $auth_args subnet-create --ip-version 6 public fdee:9f85:83be::/48
    fi
    
    quantum $auth_args net-show public | grep ' id ' | awk '{ print $4 }'

    typeset public_network_id=$(quantum $auth_args net-show public | grep ' id ' | awk '{ print $4 }')
    iniset $AKANDA_RUG_CONF DEFAULT external_network_id $public_network_id

    quantum $auth_args net-create mgt
    typeset mgt_network_id=$(quantum $auth_args net-show mgt | grep ' id ' | awk '{ print $4 }')
    iniset $AKANDA_RUG_CONF DEFAULT management_network_id $mgt_network_id

    # Remove the ipv6 subnet created automatically before adding our
    # own.  We have to modify the output of net-show to allow it to be
    # parsed properly as shell variables, and we run both commands in
    # a subshell to avoid polluting the local namespace.
    (eval $(quantum $auth_args net-show -f shell mgt | sed 's/:/_/g');
        quantum $auth_args subnet-delete $subnets)

    typeset mgt_subnet_id=$(quantum $auth_args subnet-create mgt fdca:3ba5:a17a:acda::/64 --ip-version=6 | grep ' id ' | awk '{ print $4 }')
    iniset $AKANDA_RUG_CONF DEFAULT management_subnet_id $mgt_subnet_id

    if [ -f $AKANDA_ISO_FILE ]
    then
        echo "Using existing Akanda image file $AKANDA_ISO_FILE"
    else
        typeset isodir=$(dirname $AKANDA_ISO_FILE)
        sudo mkdir -p $isodir
        sudo chown $STACK_USER $isodir
        # Load the credentials from a file outside of the git repo,
        # find the latest ISO file name, then download that file.
        if [ ! -f $DEST/.akanda_dho_creds ]
        then
            echo "Did not find $DEST/.akanda_dho_creds" 1>&2
            exit 1
        fi
        echo "Looking for latest ISO file"
        typeset latest=$(source $DEST/.akanda_dho_creds && swift -V 1.0 download akanda-images -o - LATEST)
        [ $? -ne 0 ] && exit 1
        echo "Downloading ISO file to $AKANDA_ISO_FILE"
        (source $DEST/.akanda_dho_creds && swift -V 1.0 download -o $AKANDA_ISO_FILE akanda-images $latest) || exit 1
    fi

    glance $auth_args image-create --name akanda --disk-format iso --container-format bare --property hw_vif_model=e1000 --file $AKANDA_ISO_FILE
    typeset image_id=$(glance $auth_args image-show akanda | grep ' id ' | awk '{print $4}')
    iniset $AKANDA_RUG_CONF DEFAULT router_image_uuid $image_id
    
    iniset $AKANDA_RUG_CONF DEFAULT auth_url $OS_AUTH_URL
}

function start_akanda_rug() {
    screen_it ak-rug "cd $AKANDA_RUG_DIR && sudo akanda-rug-service --config-file $AKANDA_RUG_CONF"
    echo '************************************************************'
    echo "Sleeping for a while to make sure the tap device gets set up"
    echo '************************************************************'
    sleep 30
}

function post_start_akanda() {
    echo "Creating demo user network and subnet"
    quantum --os-username demo --os-password $ADMIN_PASSWORD \
        --os-tenant-name demo --os-auth-url $OS_AUTH_URL \
        net-create thenet
    quantum --os-username demo --os-password $ADMIN_PASSWORD \
        --os-tenant-name demo --os-auth-url $OS_AUTH_URL \
        subnet-create thenet 192.168.0.0/24
}
